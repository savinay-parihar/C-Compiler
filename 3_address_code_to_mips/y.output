Terminals unused in grammar

   OSB
   CSB
   PLUS
   MINUS
   TIMES
   DIVIDE
   SMALLER
   SMALLEREQ
   GREATER
   GREATEREQ
   EQEQ
   OPT
   PUSH


Grammar

    0 $accept: lines $end

    1 lines: %empty
    2      | lines line

    3 line: binary
    4     | unary
    5     | copy
    6     | conditional_jump
    7     | unconditional_jump
    8     | parameters
    9     | function_call
   10     | indexed_copy
   11     | address_pointer_assignment
   12     | label1
   13     | retur
   14     | comma
   15     | typechange

   16 retur: ret identifiernum

   17 typechange: identifier EQ FLOAT identifiernum

   18 identifiernum: identifier
   19              | num

   20 binary_ops: BINARY_OPERATORS

   21 identifier: ID

   22 num: NUM

   23 label: LABEL

   24 comma: COMMA

   25 unary: identifier EQ UNARY_OPS identifier

   26 binary: identifier EQ identifiernum binary_ops identifiernum

   27 copy: identifier EQ identifier
   28     | identifier EQ num

   29 label1: label

   30 conditional_jump: IF identifier GOTO label
   31                 | IF num GOTO label
   32                 | IF identifiernum binary_ops identifiernum GOTO label

   33 unconditional_jump: GOTO label

   34 function_call: CALL label COMMA NUM
   35              | identifier EQ CALL label COMMA NUM

   36 parameters: param identifiernum

   37 indexed_copy: identifier EQ identifier LEFTSQPAR num RIGSQPAR
   38             | identifier EQ identifier LEFTSQPAR identifier RIGSQPAR

   39 address_pointer_assignment: STAR identifier EQ identifier
   40                           | identifier EQ STAR identifier
   41                           | identifier EQ ANDP identifier
   42                           | ANDP identifier EQ identifier
   43                           | STAR identifier EQ num


Terminals, with rules where they appear

$end (0) 0
error (256)
NUM (258) 22 34 35
ID (259) 21
EQ (260) 17 25 26 27 28 35 37 38 39 40 41 42 43
OSB (261)
CSB (262)
BINARY_OPERATORS (263) 20
PLUS (264)
MINUS (265)
TIMES (266)
DIVIDE (267)
SMALLER (268)
SMALLEREQ (269)
GREATER (270)
GREATEREQ (271)
EQEQ (272)
IF (273) 30 31 32
GOTO (274) 30 31 32 33
param (275) 36
ret (276) 16
OPT (277)
FLOAT (278) 17
LABEL (279) 23
CALL (280) 34 35
COMMA (281) 24 34 35
LEFTSQPAR (282) 37 38
RIGSQPAR (283) 37 38
STAR (284) 39 40 43
ANDP (285) 41 42
UNARY_OPS (286) 25
PUSH (287)


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
lines (34)
    on left: 1 2, on right: 0 2
line (35)
    on left: 3 4 5 6 7 8 9 10 11 12 13 14 15, on right: 2
retur (36)
    on left: 16, on right: 13
typechange (37)
    on left: 17, on right: 15
identifiernum (38)
    on left: 18 19, on right: 16 17 26 32 36
binary_ops (39)
    on left: 20, on right: 26 32
identifier (40)
    on left: 21, on right: 17 18 25 26 27 28 30 35 37 38 39 40 41 42
    43
num (41)
    on left: 22, on right: 19 28 31 37 43
label (42)
    on left: 23, on right: 29 30 31 32 33 34 35
comma (43)
    on left: 24, on right: 14
unary (44)
    on left: 25, on right: 4
binary (45)
    on left: 26, on right: 3
copy (46)
    on left: 27 28, on right: 5
label1 (47)
    on left: 29, on right: 12
conditional_jump (48)
    on left: 30 31 32, on right: 6
unconditional_jump (49)
    on left: 33, on right: 7
function_call (50)
    on left: 34 35, on right: 9
parameters (51)
    on left: 36, on right: 8
indexed_copy (52)
    on left: 37 38, on right: 10
address_pointer_assignment (53)
    on left: 39 40 41 42 43, on right: 11


State 0

    0 $accept: . lines $end

    $default  reduce using rule 1 (lines)

    lines  go to state 1


State 1

    0 $accept: lines . $end
    2 lines: lines . line

    $end   shift, and go to state 2
    ID     shift, and go to state 3
    IF     shift, and go to state 4
    GOTO   shift, and go to state 5
    param  shift, and go to state 6
    ret    shift, and go to state 7
    LABEL  shift, and go to state 8
    CALL   shift, and go to state 9
    COMMA  shift, and go to state 10
    STAR   shift, and go to state 11
    ANDP   shift, and go to state 12

    line                        go to state 13
    retur                       go to state 14
    typechange                  go to state 15
    identifier                  go to state 16
    label                       go to state 17
    comma                       go to state 18
    unary                       go to state 19
    binary                      go to state 20
    copy                        go to state 21
    label1                      go to state 22
    conditional_jump            go to state 23
    unconditional_jump          go to state 24
    function_call               go to state 25
    parameters                  go to state 26
    indexed_copy                go to state 27
    address_pointer_assignment  go to state 28


State 2

    0 $accept: lines $end .

    $default  accept


State 3

   21 identifier: ID .

    $default  reduce using rule 21 (identifier)


State 4

   30 conditional_jump: IF . identifier GOTO label
   31                 | IF . num GOTO label
   32                 | IF . identifiernum binary_ops identifiernum GOTO label

    NUM  shift, and go to state 29
    ID   shift, and go to state 3

    identifiernum  go to state 30
    identifier     go to state 31
    num            go to state 32


State 5

   33 unconditional_jump: GOTO . label

    LABEL  shift, and go to state 8

    label  go to state 33


State 6

   36 parameters: param . identifiernum

    NUM  shift, and go to state 29
    ID   shift, and go to state 3

    identifiernum  go to state 34
    identifier     go to state 35
    num            go to state 36


State 7

   16 retur: ret . identifiernum

    NUM  shift, and go to state 29
    ID   shift, and go to state 3

    identifiernum  go to state 37
    identifier     go to state 35
    num            go to state 36


State 8

   23 label: LABEL .

    $default  reduce using rule 23 (label)


State 9

   34 function_call: CALL . label COMMA NUM

    LABEL  shift, and go to state 8

    label  go to state 38


State 10

   24 comma: COMMA .

    $default  reduce using rule 24 (comma)


State 11

   39 address_pointer_assignment: STAR . identifier EQ identifier
   43                           | STAR . identifier EQ num

    ID  shift, and go to state 3

    identifier  go to state 39


State 12

   42 address_pointer_assignment: ANDP . identifier EQ identifier

    ID  shift, and go to state 3

    identifier  go to state 40


State 13

    2 lines: lines line .

    $default  reduce using rule 2 (lines)


State 14

   13 line: retur .

    $default  reduce using rule 13 (line)


State 15

   15 line: typechange .

    $default  reduce using rule 15 (line)


State 16

   17 typechange: identifier . EQ FLOAT identifiernum
   25 unary: identifier . EQ UNARY_OPS identifier
   26 binary: identifier . EQ identifiernum binary_ops identifiernum
   27 copy: identifier . EQ identifier
   28     | identifier . EQ num
   35 function_call: identifier . EQ CALL label COMMA NUM
   37 indexed_copy: identifier . EQ identifier LEFTSQPAR num RIGSQPAR
   38             | identifier . EQ identifier LEFTSQPAR identifier RIGSQPAR
   40 address_pointer_assignment: identifier . EQ STAR identifier
   41                           | identifier . EQ ANDP identifier

    EQ  shift, and go to state 41


State 17

   29 label1: label .

    $default  reduce using rule 29 (label1)


State 18

   14 line: comma .

    $default  reduce using rule 14 (line)


State 19

    4 line: unary .

    $default  reduce using rule 4 (line)


State 20

    3 line: binary .

    $default  reduce using rule 3 (line)


State 21

    5 line: copy .

    $default  reduce using rule 5 (line)


State 22

   12 line: label1 .

    $default  reduce using rule 12 (line)


State 23

    6 line: conditional_jump .

    $default  reduce using rule 6 (line)


State 24

    7 line: unconditional_jump .

    $default  reduce using rule 7 (line)


State 25

    9 line: function_call .

    $default  reduce using rule 9 (line)


State 26

    8 line: parameters .

    $default  reduce using rule 8 (line)


State 27

   10 line: indexed_copy .

    $default  reduce using rule 10 (line)


State 28

   11 line: address_pointer_assignment .

    $default  reduce using rule 11 (line)


State 29

   22 num: NUM .

    $default  reduce using rule 22 (num)


State 30

   32 conditional_jump: IF identifiernum . binary_ops identifiernum GOTO label

    BINARY_OPERATORS  shift, and go to state 42

    binary_ops  go to state 43


State 31

   18 identifiernum: identifier .
   30 conditional_jump: IF identifier . GOTO label

    GOTO  shift, and go to state 44

    $default  reduce using rule 18 (identifiernum)


State 32

   19 identifiernum: num .
   31 conditional_jump: IF num . GOTO label

    GOTO  shift, and go to state 45

    $default  reduce using rule 19 (identifiernum)


State 33

   33 unconditional_jump: GOTO label .

    $default  reduce using rule 33 (unconditional_jump)


State 34

   36 parameters: param identifiernum .

    $default  reduce using rule 36 (parameters)


State 35

   18 identifiernum: identifier .

    $default  reduce using rule 18 (identifiernum)


State 36

   19 identifiernum: num .

    $default  reduce using rule 19 (identifiernum)


State 37

   16 retur: ret identifiernum .

    $default  reduce using rule 16 (retur)


State 38

   34 function_call: CALL label . COMMA NUM

    COMMA  shift, and go to state 46


State 39

   39 address_pointer_assignment: STAR identifier . EQ identifier
   43                           | STAR identifier . EQ num

    EQ  shift, and go to state 47


State 40

   42 address_pointer_assignment: ANDP identifier . EQ identifier

    EQ  shift, and go to state 48


State 41

   17 typechange: identifier EQ . FLOAT identifiernum
   25 unary: identifier EQ . UNARY_OPS identifier
   26 binary: identifier EQ . identifiernum binary_ops identifiernum
   27 copy: identifier EQ . identifier
   28     | identifier EQ . num
   35 function_call: identifier EQ . CALL label COMMA NUM
   37 indexed_copy: identifier EQ . identifier LEFTSQPAR num RIGSQPAR
   38             | identifier EQ . identifier LEFTSQPAR identifier RIGSQPAR
   40 address_pointer_assignment: identifier EQ . STAR identifier
   41                           | identifier EQ . ANDP identifier

    NUM        shift, and go to state 29
    ID         shift, and go to state 3
    FLOAT      shift, and go to state 49
    CALL       shift, and go to state 50
    STAR       shift, and go to state 51
    ANDP       shift, and go to state 52
    UNARY_OPS  shift, and go to state 53

    identifiernum  go to state 54
    identifier     go to state 55
    num            go to state 56


State 42

   20 binary_ops: BINARY_OPERATORS .

    $default  reduce using rule 20 (binary_ops)


State 43

   32 conditional_jump: IF identifiernum binary_ops . identifiernum GOTO label

    NUM  shift, and go to state 29
    ID   shift, and go to state 3

    identifiernum  go to state 57
    identifier     go to state 35
    num            go to state 36


State 44

   30 conditional_jump: IF identifier GOTO . label

    LABEL  shift, and go to state 8

    label  go to state 58


State 45

   31 conditional_jump: IF num GOTO . label

    LABEL  shift, and go to state 8

    label  go to state 59


State 46

   34 function_call: CALL label COMMA . NUM

    NUM  shift, and go to state 60


State 47

   39 address_pointer_assignment: STAR identifier EQ . identifier
   43                           | STAR identifier EQ . num

    NUM  shift, and go to state 29
    ID   shift, and go to state 3

    identifier  go to state 61
    num         go to state 62


State 48

   42 address_pointer_assignment: ANDP identifier EQ . identifier

    ID  shift, and go to state 3

    identifier  go to state 63


State 49

   17 typechange: identifier EQ FLOAT . identifiernum

    NUM  shift, and go to state 29
    ID   shift, and go to state 3

    identifiernum  go to state 64
    identifier     go to state 35
    num            go to state 36


State 50

   35 function_call: identifier EQ CALL . label COMMA NUM

    LABEL  shift, and go to state 8

    label  go to state 65


State 51

   40 address_pointer_assignment: identifier EQ STAR . identifier

    ID  shift, and go to state 3

    identifier  go to state 66


State 52

   41 address_pointer_assignment: identifier EQ ANDP . identifier

    ID  shift, and go to state 3

    identifier  go to state 67


State 53

   25 unary: identifier EQ UNARY_OPS . identifier

    ID  shift, and go to state 3

    identifier  go to state 68


State 54

   26 binary: identifier EQ identifiernum . binary_ops identifiernum

    BINARY_OPERATORS  shift, and go to state 42

    binary_ops  go to state 69


State 55

   18 identifiernum: identifier .
   27 copy: identifier EQ identifier .
   37 indexed_copy: identifier EQ identifier . LEFTSQPAR num RIGSQPAR
   38             | identifier EQ identifier . LEFTSQPAR identifier RIGSQPAR

    LEFTSQPAR  shift, and go to state 70

    BINARY_OPERATORS  reduce using rule 18 (identifiernum)
    $default          reduce using rule 27 (copy)


State 56

   19 identifiernum: num .
   28 copy: identifier EQ num .

    BINARY_OPERATORS  reduce using rule 19 (identifiernum)
    $default          reduce using rule 28 (copy)


State 57

   32 conditional_jump: IF identifiernum binary_ops identifiernum . GOTO label

    GOTO  shift, and go to state 71


State 58

   30 conditional_jump: IF identifier GOTO label .

    $default  reduce using rule 30 (conditional_jump)


State 59

   31 conditional_jump: IF num GOTO label .

    $default  reduce using rule 31 (conditional_jump)


State 60

   34 function_call: CALL label COMMA NUM .

    $default  reduce using rule 34 (function_call)


State 61

   39 address_pointer_assignment: STAR identifier EQ identifier .

    $default  reduce using rule 39 (address_pointer_assignment)


State 62

   43 address_pointer_assignment: STAR identifier EQ num .

    $default  reduce using rule 43 (address_pointer_assignment)


State 63

   42 address_pointer_assignment: ANDP identifier EQ identifier .

    $default  reduce using rule 42 (address_pointer_assignment)


State 64

   17 typechange: identifier EQ FLOAT identifiernum .

    $default  reduce using rule 17 (typechange)


State 65

   35 function_call: identifier EQ CALL label . COMMA NUM

    COMMA  shift, and go to state 72


State 66

   40 address_pointer_assignment: identifier EQ STAR identifier .

    $default  reduce using rule 40 (address_pointer_assignment)


State 67

   41 address_pointer_assignment: identifier EQ ANDP identifier .

    $default  reduce using rule 41 (address_pointer_assignment)


State 68

   25 unary: identifier EQ UNARY_OPS identifier .

    $default  reduce using rule 25 (unary)


State 69

   26 binary: identifier EQ identifiernum binary_ops . identifiernum

    NUM  shift, and go to state 29
    ID   shift, and go to state 3

    identifiernum  go to state 73
    identifier     go to state 35
    num            go to state 36


State 70

   37 indexed_copy: identifier EQ identifier LEFTSQPAR . num RIGSQPAR
   38             | identifier EQ identifier LEFTSQPAR . identifier RIGSQPAR

    NUM  shift, and go to state 29
    ID   shift, and go to state 3

    identifier  go to state 74
    num         go to state 75


State 71

   32 conditional_jump: IF identifiernum binary_ops identifiernum GOTO . label

    LABEL  shift, and go to state 8

    label  go to state 76


State 72

   35 function_call: identifier EQ CALL label COMMA . NUM

    NUM  shift, and go to state 77


State 73

   26 binary: identifier EQ identifiernum binary_ops identifiernum .

    $default  reduce using rule 26 (binary)


State 74

   38 indexed_copy: identifier EQ identifier LEFTSQPAR identifier . RIGSQPAR

    RIGSQPAR  shift, and go to state 78


State 75

   37 indexed_copy: identifier EQ identifier LEFTSQPAR num . RIGSQPAR

    RIGSQPAR  shift, and go to state 79


State 76

   32 conditional_jump: IF identifiernum binary_ops identifiernum GOTO label .

    $default  reduce using rule 32 (conditional_jump)


State 77

   35 function_call: identifier EQ CALL label COMMA NUM .

    $default  reduce using rule 35 (function_call)


State 78

   38 indexed_copy: identifier EQ identifier LEFTSQPAR identifier RIGSQPAR .

    $default  reduce using rule 38 (indexed_copy)


State 79

   37 indexed_copy: identifier EQ identifier LEFTSQPAR num RIGSQPAR .

    $default  reduce using rule 37 (indexed_copy)
